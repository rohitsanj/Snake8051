A51 MACRO ASSEMBLER  SNAKE_GAME_2                                                         10/07/2019 19:38:30 PAGE     1


MACRO ASSEMBLER A51 V8.2.7.0
OBJECT MODULE PLACED IN .\Objects\snake_game_2.obj
ASSEMBLER INVOKED BY: C:\Keil_v5\C51\BIN\A51.EXE C:\Keil_v5\C51\Examples\HELLO\snake_game_2.asm SET(SMALL) DEBUG PRINT(.
                      \Listings\snake_game_2.lst) OBJECT(.\Objects\snake_game_2.obj) EP

LOC  OBJ            LINE     SOURCE

0000                   1     ORG 0000H
0000 1156              2     ACALL MAIN
0003                   3     ORG 0003H
                       4     ;$include (misc.inc)
                +1     5     ; Constants and data definitions
  0090          +1     6     ROW                                     EQU P1
  00A0          +1     7     COL                                     EQU P2
                +1     8     
  0001          +1     9     REG_1                                   EQU 01H
  0000          +1    10     REG_0                                   EQU 00H
                +1    11             
  0002          +1    12     X                                               EQU 02H
  0003          +1    13     Y                                               EQU 03H
                +1    14             
  001F          +1    15     DIS_BUF_UND_FLOW_ADDR   EQU 1FH
  0020          +1    16     DIS_BUF_START_ADDR              EQU 20H
  0027          +1    17     DIS_BUFF_END_ADDR               EQU 27H         
  0028          +1    18     DIS_BUF_OVR_FLOW_ADDR   EQU 28H         
                +1    19     
  0038          +1    20     X_MASK                                  EQU 00111000B
  0007          +1    21     Y_MASK                                  EQU 00000111B   
                +1    22             
  0040          +1    23     SNAKE_ARRAY_START_ADDR  EQU 40H
  0002          +1    24     SNAKE_LENGTH                    EQU 02H
                +1    25     
                +1    26     
                +1    27     ;---------------------
0003            +1    28     _paintScreen:
                +1    29     ; this function prints the bytes present from 20 to 27H
                +1    30     ; before printing, the byte is complemented and given to LED Matrix
0003 780A       +1    31             MOV R0, #10
0005 C000       +1    32             back: PUSH REG_0
0007 7908       +1    33             MOV R1, #8
0009 7820       +1    34             MOV R0, #DIS_BUF_START_ADDR
000B 7401       +1    35             MOV A, #1
000D C3         +1    36             CLR C
000E F590       +1    37             up: MOV ROW, A
0010 23         +1    38             RL A
0011 C0E0       +1    39             PUSH 0E0H
0013 E6         +1    40             MOV A, @R0
0014 F4         +1    41             CPL A
0015 F5A0       +1    42             MOV COL, A
0017 D0E0       +1    43             POP 0E0H
0019 1123       +1    44             ACALL DELAY
001B 08         +1    45             INC R0
001C D9F0       +1    46             DJNZ R1, up
001E D000       +1    47             POP REG_0
0020 D8E3       +1    48             DJNZ R0, back
0022 22         +1    49     RET
                +1    50     
                +1    51     ; --------------------
0023 758901     +1    52     delay: MOV TMOD, #01H
0026 758CF0     +1    53             MOV TH0, #0F0H
0029 758A00     +1    54             MOV TL0, #000H
002C D28C       +1    55             SETB TR0
002E 308DFD     +1    56             loop: JNB TF0, loop
0031 C28C       +1    57             CLR TR0
A51 MACRO ASSEMBLER  SNAKE_GAME_2                                                         10/07/2019 19:38:30 PAGE     2

0033 C28D       +1    58             CLR TF0
0035 22         +1    59     RET
                +1    60     ;----------------------
                +1    61     ; Arguments: A
                +1    62     ; Returns: X, Y
                +1    63     
0036            +1    64     _X_Y_convert_A:
0036 C0E0       +1    65     PUSH 0E0H
0038 5438       +1    66     ANL A, #X_MASK
003A 03         +1    67     RR A
003B 03         +1    68     RR A
003C 03         +1    69     RR A
003D F502       +1    70     MOV X, A
                +1    71     
003F D0E0       +1    72     POP 0E0H
0041 5407       +1    73     ANL A, #Y_MASK
0043 F503       +1    74     MOV Y, A
0045 22         +1    75     RET
                +1    76     ; ---------------------
                +1    77     
                +1    78     ; Function:     _display_X_Y
                +1    79     ; Arguments:    X, Y
                +1    80     ; Description: 
                +1    81     ;       This function takes in (X,Y) and sets the particular bit
                +1    82     ;       For example, if (X,Y) = (1,2) then DIS_BUF_START_ADDR + Y = 22H
                +1    83     ;       Since X = 1, now set the 1st bit from the left
0046            +1    84     _display_X_Y:
0046 7420       +1    85             MOV A, #DIS_BUF_START_ADDR
0048 2503       +1    86             ADD A, Y
004A F8         +1    87             MOV R0, A
004B 7480       +1    88             MOV A, #80H
004D 03         +1    89             rotate_right: RR A
004E D502FC     +1    90             DJNZ X, rotate_right
0051 F9         +1    91             MOV R1, A
                +1    92     
0052 E6         +1    93             MOV A, @R0
0053 49         +1    94             ORL A, R1
                +1    95     
0054 F6         +1    96             MOV @R0, A
0055 22         +1    97     RET
                +1    98     ; ------------------
                +1    99     
                +1   100     ; Function:     _printSnake
                +1   101     ; Arguments:    Array of length SNAKE_LENGTH starting from memory location 40H
                +1   102     ; Description:
                +1   103     ;       Loops through array and prints the location of each byte
                +1   104     
                     105     
                     106     ; ----------------------------------------------
                     107     
0056                 108     MAIN: 
0056 7408            109     MOV A, #00001000B
0058 1136            110     ACALL _X_Y_convert_A
005A 1146            111     ACALL _display_X_Y
005C 1103            112     ACALL _paintScreen
005E 80FE            113     SJMP $
                     114     end
A51 MACRO ASSEMBLER  SNAKE_GAME_2                                                         10/07/2019 19:38:30 PAGE     3

SYMBOL TABLE LISTING
------ ----- -------


N A M E                 T Y P E  V A L U E   ATTRIBUTES

BACK . . . . . . . . .  C ADDR   0005H   A   
COL. . . . . . . . . .  D ADDR   00A0H   A   
DELAY. . . . . . . . .  C ADDR   0023H   A   
DIS_BUFF_END_ADDR. . .  N NUMB   0027H   A   
DIS_BUF_OVR_FLOW_ADDR.  N NUMB   0028H   A   
DIS_BUF_START_ADDR . .  N NUMB   0020H   A   
DIS_BUF_UND_FLOW_ADDR.  N NUMB   001FH   A   
LOOP . . . . . . . . .  C ADDR   002EH   A   
MAIN . . . . . . . . .  C ADDR   0056H   A   
P1 . . . . . . . . . .  D ADDR   0090H   A   
P2 . . . . . . . . . .  D ADDR   00A0H   A   
REG_0. . . . . . . . .  N NUMB   0000H   A   
REG_1. . . . . . . . .  N NUMB   0001H   A   
ROTATE_RIGHT . . . . .  C ADDR   004DH   A   
ROW. . . . . . . . . .  D ADDR   0090H   A   
SNAKE_ARRAY_START_ADDR  N NUMB   0040H   A   
SNAKE_LENGTH . . . . .  N NUMB   0002H   A   
TF0. . . . . . . . . .  B ADDR   0088H.5 A   
TH0. . . . . . . . . .  D ADDR   008CH   A   
TL0. . . . . . . . . .  D ADDR   008AH   A   
TMOD . . . . . . . . .  D ADDR   0089H   A   
TR0. . . . . . . . . .  B ADDR   0088H.4 A   
UP . . . . . . . . . .  C ADDR   000EH   A   
X. . . . . . . . . . .  N NUMB   0002H   A   
X_MASK . . . . . . . .  N NUMB   0038H   A   
Y. . . . . . . . . . .  N NUMB   0003H   A   
Y_MASK . . . . . . . .  N NUMB   0007H   A   
_DISPLAY_X_Y . . . . .  C ADDR   0046H   A   
_PAINTSCREEN . . . . .  C ADDR   0003H   A   
_X_Y_CONVERT_A . . . .  C ADDR   0036H   A   


REGISTER BANK(S) USED: 0 


ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S)
